# -*- coding: utf-8 -*-
"""모델 평가.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFsZ-H5mVxvWDmxL-yr7v-NZL3ZWlZU8

# 개선군 TOP3
"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_TOP3.csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 비교군 TOP3"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_TOP3(비교군).csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 개선군 TOP1"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_TOP1.csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 비교군 TOP1"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_TOP1(비교군).csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 개선군 TOP5"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_5개추천자동화.csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"],row["추천_숙소4"], row["추천_숙소5"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 비교군 TOP5"""

import pandas as pd

# ✅ 1. 평가 파일 및 핵심어 파일 불러오기
df_eval = pd.read_csv("평가결과_5개추천자동화(비교군).csv")
df_keywords = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")

# ✅ 2. 핵심어 정제 (수정된 부분)
df_keywords["고유명사_TFIDF"] = df_keywords["고유명사_TFIDF"].apply(eval)
df_keywords["핵심어_텍스트리스트"] = df_keywords["고유명사_TFIDF"].apply(
    lambda d: [kw.strip() for kw, _ in sorted(d.items(), key=lambda x: x[1], reverse=True)]
)
숙소_키워드맵 = dict(zip(df_keywords["숙소명"], df_keywords["핵심어_텍스트리스트"]))

# ✅ 3. 포함 핵심어 파싱
df_eval["포함핵심어"] = df_eval["포함핵심어"].apply(lambda x: [kw.strip() for kw in str(x).split(",")])
df_eval["핵심어 개수"] = df_eval["포함핵심어"].apply(len)

# ✅ 4. 평가 함수
def custom_hit_check(keywords, 숙소목록):
    required = len(keywords)
    for 숙소 in 숙소목록:
        숙소키워드 = 숙소_키워드맵.get(숙소, [])
        hit_count = sum(1 for k in keywords if any(k in sk for sk in 숙소키워드))
        if required == 1 and hit_count >= 1:
            return 1, hit_count
        if required > 1 and hit_count == required:
            return 1, hit_count
    return 0, 0

# ✅ 5. 평가 수행
hit_bools = []
hit_counts = []

for _, row in df_eval.iterrows():
    keywords = row["포함핵심어"]
    숙소들 = [row["추천_숙소1"], row["추천_숙소2"], row["추천_숙소3"],row["추천_숙소4"], row["추천_숙소5"]]
    hit, count = custom_hit_check(keywords, 숙소들)
    hit_bools.append(hit)
    hit_counts.append(count)

df_eval["정답여부(Hit)"] = hit_bools
df_eval["일치개수"] = hit_counts

# ✅ 6. 평가지표 계산 함수
def calculate_group_metrics(df, label):
    acc = df["정답여부(Hit)"].mean()
    rec = acc
    pre = df["일치개수"].apply(lambda x: x / 3).mean()
    return {
        "분류": label,
        "정확도(Accuracy)": round(acc, 3),
        "재현율(Recall@3)": round(rec, 3),
        "정밀도(Precision@3)": round(pre, 3)
    }

# ✅ 7. 핵심어 개수별 그룹 평가
group_metrics = []
for k in [1, 2, 3]:
    df_group = df_eval[df_eval["핵심어 개수"] == k]
    group_metrics.append(calculate_group_metrics(df_group, f"{k}개 핵심어"))

# ✅ 8. 전체 평균 추가
group_metrics.append(calculate_group_metrics(df_eval, "전체 평균"))

# ✅ 9. 결과 출력
result_df = pd.DataFrame(group_metrics)
result_df

"""# 전체 비교"""

import pandas as pd

data = {
    ("Top-1", "Accuracy"): [0.367, 0.423],
    ("Top-1", "Recall"):   [0.367, 0.423],
    ("Top-3", "Accuracy"): [0.453, 0.56],
    ("Top-3", "Recall"):   [0.453, 0.56],
    ("Top-5", "Accuracy"): [0.483, 0.567],
    ("Top-5", "Recall"):   [0.483, 0.567],
}

index = ["숙소+개요", "숙소+예상 질의"]

df_matrix = pd.DataFrame(data, index=index)
df_matrix.columns = pd.MultiIndex.from_tuples(df_matrix.columns)
df_matrix
