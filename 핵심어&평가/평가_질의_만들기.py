# -*- coding: utf-8 -*-
"""평가 질의 만들기.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eUNB5w6ifuPt2EJ55wRAE53sd2enKtOn
"""

!pip install openai==0.28
!pip install openai

import pandas as pd
import random
import openai

import os

# ✅ 2. OpenAI API 키
os.environ["OPENAI_API_KEY"] = "sk-..."  # 본인의 키로 교체
openai.api_key = os.getenv("OPENAI_API_KEY")

# ✅ 인코딩을 cp949로 지정해서 불러오기
df = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")
# ✅ eval로 딕셔너리로 변환
df["고유명사_TFIDF"] = df["고유명사_TFIDF"].apply(eval)

df

df["핵심어목록"] = df["고유명사_TFIDF"].apply(lambda d: list(d.keys()))

df.head()

# ✅ 질의 생성 함수 (예시 포함 프롬프트)
def generate_question_from_keywords(keywords: list, tfidf_dict: dict):
    tfidf_str = ', '.join([f"{k}: {v:.3f}" for k, v in tfidf_dict.items()])
    joined_keywords = ', '.join(keywords)

    prompt = f"""
당신은 관광 숙소 추천 시스템에서 사용자 질의를 생성하는 전문가입니다.
아래 핵심어(지명, 장소, 시설 등)를 포함하여 자연스럽고 실제 사용자가 말할 법한 질문을 생성해주세요.

**조건:**
- 핵심어는 반드시 모두 포함되어야 합니다.
- 아래 TF-IDF 점수표는 키워드의 중요도를 나타내며, 상위 핵심어들이 이미 선택되어 있습니다.
- 핵심어는 질문 속에 자연스럽게 녹아들게 하세요. 단순 나열은 피해주세요.
- 사용자는 해당 장소 근처의 숙소를 찾고 있는 상황입니다.

---

예시:
TF-IDF 점수표:
부산: 0.342, 자갈치시장: 0.271

선택된 핵심어: 부산, 자갈치시장

→ 질문: 부산에서 자갈치시장 근처 괜찮은 숙소 있어?

---

TF-IDF 점수표:
{tfidf_str}

선택된 핵심어: {joined_keywords}

→ 질문:"""

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response["choices"][0]["message"]["content"].strip()

# ✅ 평가 질의 생성 함수
random.seed(42)
used_combinations = set()

def auto_generate_questions(df, num_keywords, count):
    results = []
    while len(results) < count:
        row = df.sample(1).iloc[0]
        tfidf_dict = row["고유명사_TFIDF"]

        if not isinstance(tfidf_dict, dict) or len(tfidf_dict) < num_keywords:
            continue

        sorted_keywords = sorted(tfidf_dict.items(), key=lambda x: x[1], reverse=True)
        selected_keywords = [kw for kw, _ in sorted_keywords[:num_keywords]]
        key_tuple = tuple(selected_keywords)

        if key_tuple in used_combinations:
            continue
        used_combinations.add(key_tuple)

        try:
            question = generate_question_from_keywords(selected_keywords, tfidf_dict)
        except Exception as e:
            print(f"Error generating question: {e}")
            continue

        results.append({
            "질의": question,
            "포함핵심어": ", ".join(selected_keywords),
            "포함개수": num_keywords
        })

    return results

# ✅ 데이터 불러오기
df = pd.read_csv("숙소,개요,키워드.csv", encoding="cp949")
df["고유명사_TFIDF"] = df["고유명사_TFIDF"].apply(eval)

# ✅ 각 조건별 100개씩 생성
questions_1 = auto_generate_questions(df, num_keywords=1, count=100)
questions_2 = auto_generate_questions(df, num_keywords=2, count=100)
questions_3 = auto_generate_questions(df, num_keywords=3, count=100)

# ✅ 결과 통합 및 저장
final_df = pd.DataFrame(questions_1 + questions_2 + questions_3)
final_df.to_csv("평가질의_TFIDF순위_최종.csv", index=False, encoding="utf-8-sig")

# ✅ 일부 확인
final_df.tail(10)